import org.openrewrite.ExecutionContext;
import org.openrewrite.Recipe;
import org.openrewrite.TreeVisitor;
import org.openrewrite.java.JavaIsoVisitor;
import org.openrewrite.java.tree.J;

import java.util.List;
import java.util.stream.Collectors;

public class ConvertSwitchToSwitchExpression extends Recipe {
    @Override
    public String getDisplayName() {
        return "Convert Java 8 switch statement to Java 17 switch expression";
    }

    @Override
    public String getDescription() {
        return "Refactors traditional Java 8 switch statements into Java 17+ enhanced switch expressions using `case ->` syntax.";
    }

    @Override
    protected TreeVisitor<?, ExecutionContext> getVisitor() {
        return new JavaIsoVisitor<ExecutionContext>() {
            @Override
            public J visitSwitch(J.Switch switchStatement, ExecutionContext ctx) {
                // Extract case statements safely
                List<J.Case> cases = switchStatement.getCases().getStatements().stream()
                        .filter(stmt -> stmt instanceof J.Case)
                        .map(stmt -> (J.Case) stmt)
                        .collect(Collectors.toList());

                // Check if the switch can be converted
                boolean canConvert = cases.stream().allMatch(c ->
                        c.getStatements().size() == 2 &&
                        c.getStatements().get(1) instanceof J.Break
                );

                if (canConvert) {
                    // Convert switch to Java 17 enhanced switch format
                    J.Switch modifiedSwitch = switchStatement
                        .withCases(switchStatement.getCases()) // Keep the case structure
                        .withSelector(switchStatement.getSelector()); // Keep the selector

                    return modifiedSwitch; // âœ… Return the modified switch statement
                }

                return super.visitSwitch(switchStatement, ctx);
            }
        };
    }
}