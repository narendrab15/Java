import org.openrewrite.ExecutionContext;
import org.openrewrite.Recipe;
import org.openrewrite.TreeVisitor;
import org.openrewrite.java.JavaIsoVisitor;
import org.openrewrite.java.tree.J;

import java.util.List;
import java.util.stream.Collectors;

public class ConvertSwitchToSwitchExpression extends Recipe {
    @Override
    public String getDisplayName() {
        return "Convert Java 8 switch to Java 17 switch expression";
    }

    @Override
    public String getDescription() {
        return "Refactors traditional switch statements into Java 17+ switch expressions using `case ->`.";
    }

    @Override
    protected TreeVisitor<?, ExecutionContext> getVisitor() {
        return new JavaIsoVisitor<ExecutionContext>() {
            @Override
            public J visitSwitch(J.Switch switchStatement, ExecutionContext ctx) {
                // Extract case statements safely
                List<J.Case> cases = switchStatement.getCases().getStatements().stream()
                    .filter(stmt -> stmt instanceof J.Case)
                    .map(stmt -> (J.Case) stmt)
                    .collect(Collectors.toList());

                // Check if the switch can be converted
                boolean canConvert = cases.stream().allMatch(c ->
                    c.getStatements().size() == 2 &&
                    c.getStatements().get(1) instanceof J.Break
                );

                if (canConvert) {
                    // Transform into Java 17 switch expression
                    String newSwitchExpression = "switch (" + switchStatement.getSelector().printTrimmed(getCursor()) + ") {\n" +
                        cases.stream()
                            .map(c ->
                                c.getExpressions().get(0).printTrimmed(getCursor()) +
                                " -> " +
                                c.getStatements().get(0).printTrimmed(getCursor()) + ";"
                            )
                            .collect(Collectors.joining("\n")) +
                        "\n};";

                    return switchStatement.withTemplate(
                        JavaTemplate.builder(this::getCursor, newSwitchExpression).build(),
                        switchStatement.getCoordinates().replace()
                    );
                }

                return super.visitSwitch(switchStatement, ctx);
            }
        };
    }
}
